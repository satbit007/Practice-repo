#include <stdio.h>
#include <stdlib.h>


void swap(int arr[], int a, int b)
{
  int tmp = arr[a];
  arr[a] = arr[b];
  arr[b] = tmp;
}

void heapify(int maxHeap[], int n, int i) {
  // Find largest among root, left child and right child
  int largest = i;
  int left = 2 * i + 1;
  int right = 2 * i + 2;

  if (left < n && maxHeap[left] > maxHeap[largest])
    largest = left;

  if (right < n && maxHeap[right] > maxHeap[largest])
    largest = right;

  // Swap and continue heapifying if root is not largest
  if (largest != i) {
    swap(maxHeap, i, largest);
    heapify(maxHeap, n, largest);
  }
}

   void heapsort(int arr[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
      heapify(arr, n, i);
  
    // Heap sort
    for (int i = n - 1; i >= 0; i--) {
      swap(arr, 0, i);
  
      // Heapify root element to get highest element at root again
      heapify(arr, i, 0);
    }
  }


void thirdLargestNum(int  *maxHeap, int n){   
  heapsort(maxHeap, n);
  printf("%d\n", maxHeap[n-3]);
}

int main() {
    int maxHeap[] = {12,6,10,1,5,9};
    
    int n = 6;
  
    thirdLargestNum(maxHeap, n);
}