#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* next;
    struct Node* next2;
};

typedef struct Node NodeAddress;

NodeAddress* reverseLLWithNext2(NodeAddress* head) {
    NodeAddress* curr = head;
    NodeAddress* prev = NULL;
    NodeAddress* next = NULL;
    NodeAddress* f_n = head->next2;

    int count = 0;

    while(curr!= NULL) {
        next = curr->next;
        curr->next = prev;

        if(count < 2) curr->next2 = NULL;
        if (f_n) {
            f_n->next2 = curr;
            f_n = f_n->next;
        }

        prev = curr;
        curr = next;
        count++;

    }

    return prev;
}

NodeAddress* arrayToLLWithNext2(int* a, int n) {
    NodeAddress* head = NULL;
    NodeAddress* p2 = NULL;
    NodeAddress* temp = NULL;


    for (int i = 0; i < n; i++) {
        if (head == NULL) {
            head = (NodeAddress *)malloc(sizeof(NodeAddress));
            head->data = a[i];
            head->next = NULL;
            head->next2 = NULL;
            temp = head;
            p2 = temp;
        }
        else {
            temp->next = (NodeAddress *)malloc(sizeof(NodeAddress));
            temp = temp->next;
            temp->data = a[i];
            temp->next = NULL;
            temp->next2 = NULL;

            if (i >= 2) {
                p2->next2 = temp;
                p2 = p2->next;
            }
        }
    }
    return head;
}

void printLL(NodeAddress* head) {
    NodeAddress* temp = head;

    while(temp != NULL) {
       printf("%d ", temp->data);
        temp = temp->next; }
    printf("\n");
}

int main() {
    int a[] = {1,2,3,4,5};
    int n = sizeof(a)/sizeof(a[0]);

    NodeAddress* head = arrayToLLWithNext2(a, n);

    printf("Original Linked List:\n");

    //prints linked list following next pointer
    printLL(head);



    head = reverseLLWithNext2(head);

    printf("Reversed Linked List:\n");
    
    //prints linked list following next pointer
    printLL(head);

}